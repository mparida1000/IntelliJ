package com.scaler.map;

import java.util.ArrayList;

//Given an array A of N integers.
//
//Find the length of the longest subarray in the array which sums to zero.

public class LongestSubarrayZeroSum {
	
	public static int solve(int[] A) {
		int n = A.length;
		System.err.println(n);
		int [] pf = new int [n];
		ArrayList<Integer> al = new ArrayList<>();
		pf[0] = A[0];
		al.add(pf[0]);
		int maxLength = 0;
		for(int i = 1 ; i < n ; i++) {
			pf[i] = pf[i -1] + A[i];
			if(pf[i] == 0)maxLength = i+1;
			if(al.lastIndexOf(pf[i]) != -1) {
				int l = i - al.lastIndexOf(pf[i]);
				if (l > maxLength)maxLength = l;
			}
			al.add(pf[i]);
		}
		return maxLength;
    }
	
	public static void main(String[] args) {
		int [] A = {1,3,-2,-1,1};
		int [] B = {1,2,-2,6,9,-10,-6,4};
		int [] C = {1,2,-2,-1,3,1,1,-2,-3};
		int [] D = {704, -964, -290, 297, -573, -347, 614, -396, 208, -613, -826, 759, 837, 224, -668, 717, -985, 778, -339, -253, 574, -378, -680, 949, -842, -547, -311, 846, 467, 435, 511, -596, -482, -757, 623, -1000, -225, -61, -251, -16, -851, 533, -784, 795, -796, -955, -762, -873, 575, -485, -538, -534, -367, -712, 941, 247, -265, 407, -126, 107, 605, -685, -522, -29, -246, 901, 661, 535, -69, 478, -169, 803, 857, -97, -187, -241, -286, 378, -650, 950, -912, -329, 412, 835, 608, 546, -451, -233, -400, -918, -257, 189, -975, -695, -780, 530, 102, 856, -247, -729, 656, -237, 815, 336, 217, -688, 874, -62, -401, -354, 5, 806, -567, -257, 525, 998, 12, -602, -632, 1, -898, -131, -282, -251, 609, -223, -200, -376, 906, -418, 899, 302, 251, 1000, 174, -496, 336, -873, -669, -492, 847, 90, -417, -53, 464, -342, -92, -327, -93, 514, 182, 986, 807, -584, -924, 85, 787, -423, 406, -655, 946, 693, 530, 955, 497, 399, -136, -813, 34, -297, 43, -680, -174, -552, -559, -583, -938, 460, -269, 103, 443, 163, -144, 40, 767, 701, 208, 24, 61, -433, -701, 757, 638, 801, -716, 109, 412, -436, 73, -88, 121, -377, -928, -511, 566, 710, -81, -17, 360, -971, 637, 244, 348, 988, 28, 596, 653, 11, -597, 597, -5, 965, -452, -995, -510, -223, 378, -658, 559, 806, 241, -831, -388, -943, -885, 9, -658, -202, 817, 504, 989, -765, 511, -12, -185, 407, 888, 514, 967, -814, -224, 762, -937, -76, 543, 95, 601, -319, 449, -378, 257, 806, -602, -660, 532, -595, -21, 748, -614, -581, -742, 781, -524, 785, -103, -503, 15};
		System.out.println(solve(D));
	}

}
